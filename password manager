
import sqlite3
from cryptography.fernet import Fernet
import getpass
import os

# Generate and save a key (one-time setup)
def generate_key():
    key = Fernet.generate_key()
    with open("secret.key", "wb") as key_file:
        key_file.write(key)

# Load the key
def load_key():
    return open("secret.key", "rb").read()

# Encrypt password
def encrypt_password(password):
    key = load_key()
    f = Fernet(key)
    encrypted_password = f.encrypt(password.encode())
    return encrypted_password

# Decrypt password
def decrypt_password(encrypted_password):
    key = load_key()
    f = Fernet(key)
    decrypted_password = f.decrypt(encrypted_password).decode()
    return decrypted_password

# Initialize the database
def init_db():
    conn = sqlite3.connect('password_manager.db')
    cursor = conn.cursor()
    cursor.execute('''CREATE TABLE IF NOT EXISTS passwords
                      (id INTEGER PRIMARY KEY, account TEXT, username TEXT, password TEXT)''')
    conn.commit()
    conn.close()

# Add a new password
def add_password(account, username, password):
    encrypted_password = encrypt_password(password)
    conn = sqlite3.connect('password_manager.db')
    cursor = conn.cursor()
    cursor.execute("INSERT INTO passwords (account, username, password) VALUES (?, ?, ?)",
                   (account, username, encrypted_password))
    conn.commit()
    conn.close()

# Retrieve a password
def retrieve_password(account):
    conn = sqlite3.connect('password_manager.db')
    cursor = conn.cursor()
    cursor.execute("SELECT username, password FROM passwords WHERE account=?", (account,))
    result = cursor.fetchone()
    conn.close()
    if result:
        username, encrypted_password = result
        password = decrypt_password(encrypted_password)
        return username, password
    else:
        return None

# User authentication
def authenticate(master_password):
    stored_password = None
    if os.path.exists("master_password.txt"):
        with open("master_password.txt", "r") as f:
            stored_password = f.read()
    if stored_password:
        return stored_password == master_password
    else:
        with open("master_password.txt", "w") as f:
            f.write(master_password)
        return True

# Main program
def main():
    # One-time setup
    if not os.path.exists("secret.key"):
        generate_key()
    init_db()

    print("Welcome to Py 04 Password Manager")
    master_password = getpass.getpass("Enter master password: ")
    
    if not authenticate(master_password):
        print("Authentication failed.")
        return
    
    while True:
        print("\nMenu:")
        print("1. Add a new password")
        print("2. Retrieve a password")
        print("3. Exit")
        choice = input("Choose an option: ")
        
        if choice == '1':
            account = input("Enter account name: ")
            username = input("Enter username: ")
            password = getpass.getpass("Enter password: ")
            add_password(account, username, password)
            print("Password added successfully.")
        
        elif choice == '2':
            account = input("Enter account name: ")
            result = retrieve_password(account)
            if result:
                username, password = result
                print(f"Username: {username}")
                print(f"Password: {password}")
            else:
                print("Account not found.")
        
        elif choice == '3':
            print("Exiting...")
            break
        
        else:
            print("Invalid option. Please try again.")

if __name__ == "__main__":
    main()
